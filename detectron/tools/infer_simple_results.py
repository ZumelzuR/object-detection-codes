#!/usr/bin/env python2

# Copyright (c) 2017-present, Facebook, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
##############################################################################

"""Perform inference on a single image or all images with a certain extension
(e.g., .jpg) in a folder.
"""

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
from __future__ import unicode_literals

from collections import defaultdict
import cv2  # NOQA (Must import before importing caffe2 due to bug in cv2)
import glob
import os
import sys
from time import time
import argparse
from caffe2.python import workspace
from lxml import etree

from detectron.core.config import assert_and_infer_cfg
from detectron.core.config import cfg
from detectron.core.config import merge_cfg_from_file
from detectron.utils.timer import Timer
import detectron.core.test_engine as infer_engine
import detectron.datasets.dummy_datasets as dummy_datasets
import detectron.utils.c2 as c2_utils

c2_utils.import_detectron_ops()
# OpenCL may be enabled by default in OpenCV3; disable it because it's not
# thread safe and causes unwanted GPU memory allocations.
cv2.ocl.setUseOpenCL(False)

import numpy as np
import pycocotools.mask as mask_util


def parse_args():
    parser = argparse.ArgumentParser(description='End-to-end inference')
    parser.add_argument(
        '--cfg',
        dest='cfg',
        help='cfg model file (/path/to/model_config.yaml)',
        default=None,
        type=str
    )
    parser.add_argument(
        '--wts',
        dest='weights',
        help='weights model file (/path/to/model_weights.pkl)',
        default=None,
        type=str
    )
    parser.add_argument(
        '--output-dir',
        dest='output_dir',
        help='directory for visualization pdfs (default: /tmp/infer_simple)',
        default='/tmp/infer_simple',
        type=str
    )
    parser.add_argument(
        '--image-ext',
        dest='image_ext',
        help='image file name extension (default: jpg)',
        default='jpg',
        type=str
    )
    parser.add_argument(
        'im_or_folder', help='image or folder of images', default=None
    )
    if len(sys.argv) == 1:
        parser.print_help()
        sys.exit(1)
    return parser.parse_args()

def convert_from_cls_format(cls_boxes, cls_segms, cls_keyps):
    """Convert from the class boxes/segms/keyps format generated by the testing
    code.
    """
    box_list = [b for b in cls_boxes if len(b) > 0]
    if len(box_list) > 0:
        boxes = np.concatenate(box_list)
    else:
        boxes = None
    if cls_segms is not None:
        segms = [s for slist in cls_segms for s in slist]
    else:
        segms = None
    if cls_keyps is not None:
        keyps = [k for klist in cls_keyps for k in klist]
    else:
        keyps = None
    classes = []
    for j in range(len(cls_boxes)):
        classes += [j] * len(cls_boxes[j])
    return boxes, segms, keyps, classes



def obtenerGroundTruth(im_name):
    box=np.zeros(4)
    ann = etree.parse(im_name.replace(".jpg", ".xml"))
    bbox=ann.find("object/bndbox")
    box[0]= float(bbox.find('xmin').text)
    box[1] = float(bbox.find('ymin').text)
    box[2] = float(bbox.find('xmax').text)
    box[3] = float(bbox.find('ymax').text)
    return box

def list_files_ext(directory, extension):
    return list(f for f in os.listdir(directory) if f.endswith('.' + extension))

def obtenerIoU(boxA, boxB):
	# determine the (x, y)-coordinates of the intersection rectangle
	xA = max(boxA[0], boxB[0])
	yA = max(boxA[1], boxB[1])
	xB = min(boxA[2], boxB[2])
	yB = min(boxA[3], boxB[3])

	# compute the area of intersection rectangle
	interArea = (xB - xA + 1) * (yB - yA + 1)

	# compute the area of both the prediction and ground-truth
	# rectangles
	boxAArea = (boxA[2] - boxA[0] + 1) * (boxA[3] - boxA[1] + 1)
	boxBArea = (boxB[2] - boxB[0] + 1) * (boxB[3] - boxB[1] + 1)

	# compute the intersection over union by taking the intersection
	# area and dividing it by the sum of prediction + ground-truth
	# areas - the interesection area
	iou = interArea / float(boxAArea + boxBArea - interArea)

	# return the intersection over union value
	return iou

if __name__ == '__main__':
    workspace.GlobalInit(['caffe2', '--caffe2_log_level=0'])
    #cfg_args='/home/czumelzu/detectron/configs/12_2017_baselines/e2e_mask_rcnn_R-101-FPN_2x.yaml'
    cfg_args='/home/czumelzu/detectron/configs/12_2017_baselines/e2e_mask_rcnn_X-101-64x4d-FPN_1x.yaml'
    weights_args='/home/czumelzu/detectron/model_final.pkl'
    #weights_args='/tmp/detectron-download-cache/ImageNetPretrained/MSRA/R-101.pkl'
    merge_cfg_from_file(cfg_args)
    cfg.TEST.WEIGHTS = weights_args
    cfg.NUM_GPUS = 1
    #args.weights = cache_url(args.weights, cfg.DOWNLOAD_CACHE)
    assert_and_infer_cfg()
    model = infer_engine.initialize_model_from_cfg(weights_args)
    #model = infer_engine.initialize_model_from_cfg()
    dummy_coco_dataset = dummy_datasets.get_coco_dataset()
    id_img = list_files_ext("/home/czumelzu/images/test","jpg")
    im_names = []
    for i in id_img:
    	im_names.append(os.path.join("/home/czumelzu/images/test",i))
    tp=0
    tn=0
    fp=0
    fn=0
    sumTime=0
    for i, im_name in enumerate(im_names):
        print (i)
        im = cv2.imread(im_name)
        with c2_utils.NamedCudaScope(0):
            initial_time=time()
            cls_boxes, cls_segms, cls_keyps = infer_engine.im_detect_all(model, im, None)
            final_time=time()
            ET=final_time-initial_time
            sumTime=sumTime+ET
        boxes, segms, keypoints, classes = convert_from_cls_format(cls_boxes, cls_segms, cls_keyps)
    #        masks = mask_util.decode(segms)
    #
    #
        person=[]
        for i in range(len(classes)):
            if(classes[i]==1 and boxes[i][4]>0.7):
                person.append(i)
    #
    #


        if 'positivos' in im_name:
              if(len(person)>0):
                  bbox=np.zeros(4)
                  bbox[0]=int(boxes[person[0]][0])
                  bbox[1]=int(boxes[person[0]][1])
                  bbox[2]=int(boxes[person[0]][2])
                  bbox[3]=int(boxes[person[0]][3])
                  groundTruth=obtenerGroundTruth(im_name)
                  IoU=obtenerIoU(bbox,groundTruth)


              if(IoU>=0.75):
                            tp+=1
              else:
                            fn+=1
        else:
              if(len(person)>0):
                            fp+=1
              else:
                            tn+=1



    acc=(tp+tn)*1.0/(tp+tn+fp+fn)
    #recall
    sens= tp*1.0/(tp+fn)
    esp= tn*1.0/(tn+fp)
    #presicion
    if tp+fp == 0:
        pres=0
    else:
        pres= tp*1.0/(tp+fp);

    print("accuracy:"+str(acc))
    print("sensibilidad"+str(sens))
    print("especifidad"+str(esp))
    print("precision:"+str(pres))
    avgTime=sumTime/(len(im_names)*1.0)
    print('Average time per image:',avgTime)
